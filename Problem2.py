# Project Euler: Problem2.py

# Each new term in the Fibonacci sequence is generated by adding the previous
# two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed
# four million, find the sum of the even-valued terms.

import sys

def main():

    n = 1

    listOf = []

    recursive(n, n, listOf)
    sumOf(listOf)

def recursive(currentNumber, previousNumber, listOf):

    if (currentNumber >= 4000000):
        # Base case
        pass
    else:
        newCurrentNumber = currentNumber + previousNumber
        previousNumber = currentNumber
        if (newCurrentNumber % 2 == 0) and (newCurrentNumber < 4000000):
            listOf.append(newCurrentNumber)
        recursive(newCurrentNumber, previousNumber, listOf)

def sumOf(listOf):

    evenSum = 0

    for evenNumber in listOf:
        evenSum += evenNumber

    print(evenSum)

main()
